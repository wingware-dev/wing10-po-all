#!/usr/bin/env python

# Somewhat experimental approach to auto-translation of PO file strings using OpenAI
# language model.  The language and file to translate are hard-wired right now.  The
# results are quite good, but within the limits of what is available to the AI in terms
# of context.  Common mistakes are:
#
# * Mistakes a word that can be both a noun and a verb and uses the wrong sense --
#   not much can be done about this, and human translators would have the same issue
#   if they don't understand the software.
# * Is not consistent in translating the same term, usually esoteric things like
#   "Refactoring".  Could possibly improve this by using the AI Assistant API
#   instead and using the same assistant to translate each string, so there is
#   context and thus more of a chance of consistency.
# * It does a remarkably good job of retaining _ but sometimes can be improved and
#   of course cannot know when it's introducing duplicates within a single menu.
#
# The bottom line is it needs a human to review the translations, but it's certainly
# way faster then writing them from scratch.
#
# Currently requires installing polib into the Python runtime for Wing, which should
# of course only be done when working on PO files and not in general.

import os
import sys

kLanguages = {
  'de': 'German',
  'fr': 'French',
  'es': 'Spanish',
  'ru': 'Russian',
}

kLanguagesWeKnow = ['de']

kIncludeFiles = (
  'bootstrap.po', 
  'build-files.po', 
  'src_guimgr.po', 
  'src_guimgr_commands.po', 
  'src_guiutils.po', 
  'plugins_ai_openai_gpt.po', 
  'plugins_cluster_dockercompose.po', 
  'plugins_container_docker.po', 
  'src_package.po', 
  'plugins_container_lxc.po', 
  'src_parsetools.po', 
  'scripts_debugger_extensions.po', 
  'scripts_django.po', 
  'scripts_editor_extensions.po', 
  'src_pref.po', 
  'scripts_emacs_extensions.po', 
  'src_process.po', 
  'src_profile.po', 
  'src_proj.po', 
  'src.po', 
  'src_pysource.po', 
  'src_ai.po', 
  'src_refactoring.po', 
  'src_browser.po', 
  'src_cache.po', 
  'src_scripting.po', 
  'src_codewarnings.po', 
  'src_search.po', 
  'src_command.po', 
  'src_debug_client.po', 
  'src_testing.po', 
  'src_debug_tserver.po', 
  'src_diff.po', 
  'src_versioncontrol.po', 
  'src_edit.po', 
  'src_wingbase.po', 
  'src_wingide.po', 
  'src_wingutils.po', 
)

# Attended mode runs for the languages we know, with the intention being that this translation
# will be checked over by a human and the 'fuzzy' flag cleared
gMode = 'unattended'
if gMode == 'attended':
  gLanguages = ('de', )
  gClearFuzzy = True
  gRetranslateFuzzy = False
  
# Otherwise we run for languages we don't know to produce a good starting point for translation
# but leaving the 'fuzzy' flag set so that the translations do not appear in the UI
else:
  gLanguages = ('fr', 'ru', 'es')
  gClearFuzzy = False # In fact it will be set on any newly translated field
  # Set this to force re-translating all fuzzy strings, which is useful if they were
  # generated by something other than AI or if AI has improved
  gRetranslateFuzzy = True
  
# This needs to be changed when running this file from outside of the Wing sources
winghome = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#----------------------------------------------------------------------
def NP_LoadModuleHere(modname):
  """Load the given module from same directory as this file
  without adding it to sys.modules"""

  sys.modules.pop(modname, None)

  sys.path.insert(0, os.path.join(winghome, 'bootstrap'))
  exec('import %s' % modname)
  sys.modules.pop(modname, None)

  sys.path = sys.path[1:]
  return locals()[modname]
  
bootstrap_utils = NP_LoadModuleHere('bootstrap_utils')

from wingbase import timeout

sys.path.append(os.path.join(winghome, 'plugins', 'ai'))
import openai_gpt

# Requires installing polib into the Python runtime
import polib

gCount = [0]
gCost = [0.]

def RequestTranslation(txt, language):

  query = f"""Please translate the following text written in English into {language}.  This is
a string visible in the user interface of a Python IDE.  Any marks beginning with % or inside
{{}} should be left in the translated string, in the same position grammatically as in the
original English.  Underscores (_) indicate menu accelerators and should be retained if
possible.  Please provide only the translation without any commentary or additional text:
  
{txt}
"""

  from openai import OpenAI, resources

  client = OpenAI(api_key=openai_gpt._APIKey())

  chat = resources.Chat(client)
  result = chat.completions.create(
      model='gpt-4o',
        messages=[{'role': 'user', 'content': query}],        
    )

  return (result.choices[0].message.content, (result.usage.prompt_tokens/1000.)*.01 + (result.usage.completion_tokens/1000.)*.03)
  
def IterateAndSavePOFile(filename, language):

  print(f"Translating {filename} into {language}")
  pofile = polib.pofile(filename)

  changed = False
  for entry in pofile:
    if (gRetranslateFuzzy and entry.fuzzy) or not entry.translated():
      newstr, cost = RequestTranslation(entry.msgid, language)
      gCost[0] += cost
      gCount[0] += 1
      entry.msgstr = newstr
      if gClearFuzzy:
        entry.fuzzy = False
      else:
        entry.fuzzy = True
      changed = True
      print(gCount[0], gCost[0])

  if changed:
    pofile.save(filename)
    
  print(f"Translated {gCount} strings at cost of ${gCost}")
      
if __name__ == '__main__':
  
  # Find winghome and user settings directory and put into the _winghome module
  absname = os.path.abspath(os.path.normpath(__file__))
  winghome = os.path.dirname(os.path.dirname(absname))
  winghome, user_settings = bootstrap_utils.NP_SetupWingHomeModule(winghome)

  # Set up the meta importer so remote agent is updateable
  meta = bootstrap_utils.NP_CreateMetaImporter(winghome, user_settings, 'dbg',
                                               logger=sys.stdout)
  
  sys.path.append(os.path.join(winghome, 'bin/__os__/macos/runtime-pip-openai-py3.11/lib/python3.11/site-packages'))

  podir = os.path.join(os.path.join(winghome, 'resources', 'PO'))
  for language in gLanguages:
    print(f"Translating into {kLanguages[language]}")
    for filename in os.listdir(os.path.join(podir, language)):
      if filename not in kIncludeFiles:
        print("Skipping file", filename)
        continue
      file = os.path.join(podir, language, filename)
      print("Translating", file)
      IterateAndSavePOFile(file, kLanguages[language])

